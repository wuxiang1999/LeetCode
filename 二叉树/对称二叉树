给定一个二叉树，检查它是否是镜像对称的。

例如，二叉树 [1,2,2,3,4,4,3] 是对称的。

    1
   / \
  2   2
 / \ / \
3  4 4  3
但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的:

    1
   / \
  2   2
   \   \
   3    3
 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
 //递归版
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        return Symmetric(root->left,root->right);
    }
    bool Symmetric(TreeNode* left,TreeNode*right){
        if(left==NULL&&right==NULL) return true;  //如果均为空，则为true
        if(left==NULL||right==NULL) return false; //如果只有一个为空，则为false
        if(left->val!=right->val)
            return false;
        return Symmetric(left->left,right->right)&&Symmetric(left->right,right->left);
    }
};

//迭代版

//每次提取两个结点并比较它们的值。然后，将两个结点的左右子结点按相反的顺序插入队列中。
    当队列为空时，或者我们检测到树不对称（即从队列中取出两个不相等的连续结点）时，该算法结束。

 #include<queue>
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        queue<TreeNode*> q;
        TreeNode* temp1;
        TreeNode* temp2;
        q.push(root);
        q.push(root);
        while(!q.empty())
        {
            temp1=q.front();
            q.pop();
            temp2=q.front();
            q.pop();
            if(temp1==NULL&&temp2==NULL)  //如果两次取出来的值为空
                continue;
            if(temp1==NULL||temp2==NULL)  //temp1，temp2中有一个为空
                return false;
            if(temp1->val!=temp2->val)  //temp1的结点值和temp2节点的值不相等
                return false;
            q.push(temp1->left);  
            q.push(temp2->right);
            q.push(temp1->right);
            q.push(temp2->left);
        }
        return true;
    }
};

