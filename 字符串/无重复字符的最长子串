//Stupid
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.equals(" ")) return 1;
        char[] str=s.toCharArray();
        int max=0;
        int count=0;
        Map<Character, Integer> judge=new HashMap<>();
        int i=0;
        int begin=0;
        while(i<str.length&&begin<str.length)
        {
            if(judge.containsKey(str[i]))
            {   
                judge.clear();
                max=(max<count)?count:max;
                count=0;
                i=begin++;
            }
            else
            {
                judge.put(str[i],i);
                ++count;
            }   
            i++;
        }
        max=(max<count)?count:max;
        return max;
    }
}
//滑动窗口 hashset
class Solution {
    public int lengthOfLongestSubstring(String s) {
        char str[]=s.toCharArray();
        int i=0,j=0;
        int max=0;
        Set<Character> set=new HashSet<>();
        while(i<str.length&&j<str.length)
        {
            if(!set.contains(str[j]))
            {
                set.add(str[j++]);
                max=Math.max(max,j-i);
            }
            else
            {
                set.remove(str[i++]);
            }
        }
        return max;
    }
}

//最优解 HashMap
//如果 s[j]在 [i, j)范围内有与 j'重复的字符，我们不需要逐渐增加i。我们可以直接跳过 [i，j'] 范围内的所有元素，并将 i 变为 j'+1 
class Solution {
    public int lengthOfLongestSubstring(String s) {
        char str[]=s.toCharArray();
        int i=0,j=0;
        int max=0;
        HashMap<Character,Integer> map=new HashMap<>();
        while(j<str.length)
        {
            if(map.containsKey(str[j]))
            {
                i=Math.max(map.get(str[j]),i);
            }
            max=Math.max(max,j-i+1);
            map.put(str[j],j+1);
            j++;
        }
        return max;
    }
}
