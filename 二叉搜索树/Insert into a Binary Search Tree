给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。

注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。

例如, 

给定二叉搜索树:

        4
       / \
      2   7
     / \
    1   3

和 插入的值: 5
你可以返回这个二叉搜索树:

         4
       /   \
      2     7
     / \   /
    1   3 5
或者这个树也是有效的:

         5
       /   \
      2     7
     / \   
    1   3
         \
          4

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 //迭代
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null){
            root=new TreeNode(val);
            return root;
        }
        TreeNode temp=root;  //代替root去执行遍历
        while(temp!=null){
            if(temp.left!=null&&val<temp.val)
                temp=temp.left;
            if(temp.right!=null&&val>temp.val)
                temp=temp.right;
            if(val<temp.val&&temp.left==null){
                temp.left=new TreeNode(val);
                break;
            }
            if(val>temp.val&&temp.right==null){
                temp.right=new TreeNode(val);
                break;
            }
        }
        return root;
    }
}

//递归
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root==null){
            root=new TreeNode(val);
            return root;
        }
        dfs(root,val);
        return root;
    }
    void dfs(TreeNode root, int val){
        if(root.left!=null&&val<root.val)
            dfs(root.left,val);
        if(root.right!=null&&val>root.val)
            dfs(root.right,val);
        if(val<root.val&&root.left==null){
            root.left=new TreeNode(val);
            return;
        }
        if(val>root.val&&root.right==null){
            root.right=new TreeNode(val);
            return;
        }
    }
}
